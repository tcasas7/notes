#!/bin/bash

# Configuraci√≥n de variables de entorno
export DB_USER="postgres"
export DB_PASSWORD="tomas3782"
export DB_NAME="notes_app"
export DB_HOST="localhost"
export DB_PORT="5432"

# Funci√≥n para liberar puertos
function liberar_puerto() {
  PORT=$1
  echo "üîç Verificando si el puerto $PORT est√° en uso..."
  if lsof -ti:$PORT &> /dev/null; then
    echo "‚ö†Ô∏è El puerto $PORT est√° en uso. Matando el proceso..."
    lsof -ti:$PORT | xargs kill -9
    echo "‚úÖ Puerto $PORT liberado."
  else
    echo "‚úÖ El puerto $PORT est√° libre."
  fi
}

# Verificar PostgreSQL
echo "üîç Verificando instalaci√≥n de PostgreSQL..."
if ! command -v psql &> /dev/null; then
  echo "üö® PostgreSQL no est√° instalado. Instal√°ndolo..."
  brew install postgresql
fi

echo "üîß Iniciando servicio PostgreSQL..."
brew services start postgresql

# Crear usuario y base de datos si no existen
echo "üîß Configurando usuario PostgreSQL..."
PGPASSWORD=$DB_PASSWORD psql -U postgres -h localhost -p 5432 -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';" 2>/dev/null || echo "‚ö†Ô∏è El usuario ya existe."
PGPASSWORD=$DB_PASSWORD psql -U postgres -h localhost -p 5432 -c "ALTER USER $DB_USER CREATEDB;"

# Verificar la base de datos
echo "üîç Verificando existencia de la base de datos '$DB_NAME'..."
DB_EXISTS=$(PGPASSWORD=$DB_PASSWORD psql -U $DB_USER -h $DB_HOST -p $DB_PORT -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME';")
if [[ "$DB_EXISTS" != "1" ]]; then
  echo "‚öôÔ∏è Creando la base de datos '$DB_NAME'..."
  PGPASSWORD=$DB_PASSWORD createdb -U $DB_USER -h $DB_HOST -p $DB_PORT $DB_NAME
fi

# Esperar unos segundos para que PostgreSQL est√© listo
sleep 3

# Liberar puertos 3000 y 4200
liberar_puerto 3000
liberar_puerto 4200

# Configurar backend
echo "‚öôÔ∏è Configurando backend..."
cd backend
if [ ! -d "node_modules" ]; then
  npm install
fi

# Ejecutar migraciones
echo "‚öôÔ∏è Ejecutando migraciones..."
npx ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js migration:run -d ./src/data-source.ts
if [[ $? -ne 0 ]]; then
  echo "‚ùå Error al ejecutar migraciones. Verifica el archivo de migraciones y la conexi√≥n a la base de datos."
  exit 1
fi
echo "‚úÖ Migraciones ejecutadas correctamente."

# Verificar tablas en la base de datos
echo "üîç Verificando existencia de tablas clave..."
TABLES_EXIST=$(PGPASSWORD=$DB_PASSWORD psql -U $DB_USER -h $DB_HOST -p $DB_PORT -d $DB_NAME -tAc "
  SELECT EXISTS (
    SELECT 1 
    FROM information_schema.tables 
    WHERE table_name IN ('note', 'tag', 'note_tags_tag')
  );"
)

if [[ "$TABLES_EXIST" != "t" ]]; then
  echo "‚ùå Las tablas clave no existen en la base de datos. Verifica las migraciones y vuelve a ejecutar el script."
  exit 1
else
  echo "‚úÖ Todas las tablas clave existen en la base de datos."
fi

# Iniciar backend
echo "üöÄ Iniciando backend..."
npm start &
cd ..

# Configurar frontend
echo "‚öôÔ∏è Configurando frontend..."
cd frontend
if [ ! -d "node_modules" ]; then
  npm install
fi

# Desactivar el prompt de anal√≠ticas de Angular CLI
echo "üîß Desactivando anal√≠ticas de Angular CLI..."
npx ng analytics off

# Iniciar el frontend
echo "üöÄ Iniciando frontend..."
npx ng serve --host 0.0.0.0 --port 4200 &
cd ..

echo "‚úÖ Aplicaci√≥n iniciada exitosamente."
echo "Accede a la app en: http://localhost:4200"
